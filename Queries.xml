       <!--> Query1<-->

xquery version "3.0";

for $p1 in //tss/contestants/contestant/performance,$p2 in //tss/contestants/contestant/performance
where 
$p1/@Pid = $p2/@Pid 
and $p1/../@Cid > $p2/../@Cid
and $p1/@Sid = $p2/@Sid 
return
    for $score in $p1/score
    for $score2 in $p2/score
    where $score2/points/text() = $score/points/text() and $score2/@Jid = $score/@Jid
    return  <result>
            <c1>{data($p1/../@name)}</c1>
            <c2>{data($p2/../@name)}</c2>
            </result>    
        
    
       <!--> Query2<-->
   		
		xquery version "3.0";

for $p1 in //tss/contestants/contestant/performance,$p2 in //tss/contestants/contestant/performance
where 
$p1/@Pid = $p2/@Pid 
and $p1/../@Cid > $p2/../@Cid
return
    let $avg1 := avg($p1/score/points/text())
    let $avg2 := avg($p2/score/points/text())
    return if($avg1 = $avg2)
    then <result>
            <c1>{data($p1/../@name)}</c1>
            <c2>{data($p2/../@name)}</c2>
           
            </result>  
    else()
        
       <!--> Query3<-->

		
for $p1 in //tss/contestants/contestant/performance,$p2 in //tss/contestants/contestant/performance
where 
$p1/@Pid = $p2/@Pid 
and $p1/../@Cid > $p2/../@Cid
return
    let $max1 := max($p1/score/points/text())
    let $max2 := max($p2/score/points/text())
    let $cnt1 := count($p1/score/points/text())
    let $cnt2 := count($p2/score/points/text())
    
    return if($max1 = $max2 and $cnt1 = 3 and $cnt2 = 3)
    then <result>
            <c1>{data($p1/../@name)}</c1>
            <c2>{data($p2/../@name)}</c2>
           
            </result>  
    else()

	
       <!--> Query4a<-->
	
	
	declare namespace tss = "http://tss";
declare function tss:value-intersect
  ( $arg1 as xs:anyAtomicType* ,
    $arg2 as xs:anyAtomicType* )  as xs:anyAtomicType* {
        distinct-values($arg1[.=$arg2])
 } ;

for $c1 in //tss/contestants/contestant, $c2 in //tss/contestants/contestant
let $p1 := distinct-values(data($c1/performance/@Pid))
let $p2 := distinct-values(data($c2/performance/@Pid))
let $intersect := tss:value-intersect($p1,$p2)
where $c1/@Cid != $c2/@Cid
return  
          if(count($intersect) = count($p2))
               then 
                   <result> <c1> {data($c1/@name)}</c1>
                                  <c2> {data($c2/@name)}</c2>
                    </result>
               else()
	
	<!--> Query4b<-->
	
	
	xquery version "3.0";

declare namespace tss = "http://tss";
declare function tss:is-value-in-sequence
( $value as xs:anyAtomicType? ,
$seq as xs:anyAtomicType* ) as xs:boolean {
$value = $seq
} ;

for $c1 in //tss/contestants/contestant, $c2 in //tss/contestants/contestant
where every $p in distinct-values(data($c2/performance/@Pid)) 
satisfies tss:is-value-in-sequence($p, distinct-values(data($c1/performance/@Pid))) and $c1/@Cid != $c2/@Cid
return
<result> <c1> {data($c1/@name)}</c1>
<c2> {data($c2/@name)}</c2>
</result>

	<!--> Query5<-->

xquery version "3.0";

declare namespace tss = "http://tss";
 declare function tss:first-node
  ( $nodes as node()* )  as node()? {

   ($nodes/.)[1]
 } ;
 
declare function tss:coAuditions ($c1 as element(contestant)) as element()* {
 for $c2 in //tss/contestants/contestant
    for $p1 in $c1/performance
    for $p2 in $c2/performance
    for $sc1 in $p1/score
    for $sc2 in $p2/score
    where $p1/@Pid = $p2/@Pid and  $c1/@Cid != $c2/@Cid and $p1/@Sid = $p2/@Sid  and $sc2/points/text() = $sc1/points/text() and $sc2/@Jid = $sc1/@Jid
    return
        $c2
};

  declare function tss:allScores($seq as element(contestant)*) as element()* {
  (:     let $t := fn:trace($seq,'sequence')  
        return $t   :)
       if(count($seq)!=0)
       then (
                 (: fn:trace(tss:allScores(tss:checkSameScores( tss:first-node($seq))),'sequence') :)
                 tss:coAuditions(tss:first-node($seq)) |  tss:allScores(tss:coAuditions( tss:first-node($seq)) | fn:remove($seq,1))
        )
       else(
           fn:trace($seq,'seq')  ) 
};  


for $c1 in //tss/contestants/contestant 
let $q:= tss:allScores($c1)
  return <q>{$q}</q> 
        
  
